#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// Key position defines for timeless home-row mods
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47
#define THUMBS 48 49 50 51 52 53 54 55

// Finger importance: 1=Index, 2=Middle, 3=Ring, 4=Pinky
// Left side
#define LHRM1 LSHFT
#define LHRM2 LGUI
#define LHRM3 LALT
#define LHRM4 LCTRL

// Right side
#define RHRM1 RSHFT
#define RHRM2 RGUI
#define RHRM3 RALT
#define RHRM4 RCTRL

// Behavior-calling macros for home row mods
// LHM1/RHM1 use hsl/hsr (for Shift, no require-prior-idle-ms)
// LHM2-4/RHM2-4 use hml/hmr (for other mods, with require-prior-idle-ms)
// Left side
#define LHM1(_key)  &hsl LHRM1 _key
#define LHM2(_key)  &hml LHRM2 _key
#define LHM3(_key)  &hml LHRM3 _key
#define LHM4(_key)  &hml LHRM4 _key

// Right side
#define RHM1(_key)  &hsr RHRM1 _key
#define RHM2(_key)  &hmr RHRM2 _key
#define RHM3(_key)  &hmr RHRM3 _key
#define RHM4(_key)  &hmr RHRM4 _key

// Standard mod-tap behavior-calling macros (hold-preferred by default ZMK &mt)
// Left side
#define LMT1(_key)  &mt LHRM1 _key
#define LMT2(_key)  &mt LHRM2 _key
#define LMT3(_key)  &mt LHRM3 _key
#define LMT4(_key)  &mt LHRM4 _key

// Right side
#define RMT1(_key)  &mt RHRM1 _key
#define RMT2(_key)  &mt RHRM2 _key
#define RMT3(_key)  &mt RHRM3 _key
#define RMT4(_key)  &mt RHRM4 _key

// Helper macro to define home-row modifier behaviors
#define DEFINE_HRM(_label, _name, _hold, _tap, _triggers, ...)  \
    _label: _name {                                             \
      compatible = "zmk,behavior-hold-tap";                     \
      label = #_name;                                           \
      #binding-cells = <2>;                                     \
      flavor = "balanced";                                      \
      tapping-term-ms = <200>;                                  \
      quick-tap-ms = <175>;                                     \
      bindings = <_hold>, <_tap>;                               \
      hold-trigger-key-positions = <_triggers>;                 \
      hold-trigger-on-release;                                  \
      __VA_ARGS__                                               \
    }

&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    macros {
        To1_macro: To1_macro {
            compatible = "zmk,behavior-macro";
            label = "To1_macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFF &rgb_ug RGB_COLOR_HSB(128,100,50) &to 1>;
        };

        To0_macro: To0_macro {
            compatible = "zmk,behavior-macro";
            label = "To0_macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFR &to 0>;
        };

        To2_macro: To2_macro {
            compatible = "zmk,behavior-macro";
            label = "To2_macro";
            #binding-cells = <0>;
            bindings =
                <&to 2>,
                <&macro_wait_time 30>,
                <&rgb_ug RGB_COLOR_HSB(250,100,50)>;
        };
    };

    behaviors {
        // Home row mods for non-Shift keys (with require-prior-idle-ms)
        DEFINE_HRM(hml, home_row_mod_left, &kp, &kp, KEYS_R THUMBS,
            require-prior-idle-ms = <150>;
        );
        DEFINE_HRM(hmr, home_row_mod_right, &kp, &kp, KEYS_L THUMBS,
            require-prior-idle-ms = <150>;
        );

        // Home row mods for Shift keys (no require-prior-idle-ms)
        DEFINE_HRM(hsl, home_row_mod_shift_left, &kp, &kp, KEYS_R THUMBS);
        DEFINE_HRM(hsr, home_row_mod_shift_right, &kp, &kp, KEYS_L THUMBS);
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC         &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp BACKSPACE
&kp TAB         &kp Q       &kp W       &kp E       &kp R       &kp T                 &kp Y       &kp U       &kp I       &kp O       &kp P       &kp BSLH
&kp CAPSLOCK    LHM4(A)     LHM3(S)     LHM2(D)     LHM1(F)     &kp G                 &kp H       RHM1(J)     RHM2(K)     RHM3(L)     RHM4(SEMI)  &kp SQT
&kp LEFT_SHIFT  &kp Z       &kp X       &kp C       &kp V       &lt 2 B             &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp RIGHT_SHIFT
                                           &kp LEFT_CONTROL &kp SPACE  &mo 1        &kp DELETE  &kp SPACE
                                                              &kp LEFT_WIN &kp LEFT_ALT &kp ENTER
            >;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6        &kp F7     &kp F8     &kp F9    &kp F10    &kp F11  &kp F12
&trans  &none   &none   &none   &none   &trans        &none      &none      &kp UP    &none      &none    &none
&trans  &none   &none   &none   &none   &trans        &none      &kp LEFT   &kp DOWN  &kp RIGHT  &none    &trans
&trans  &trans  &trans  &trans  &trans  &none         &none      &none      &trans    &trans     &none    &trans
                        &trans  &trans  &To0_macro    &mkp LCLK  &mkp RCLK
                                &trans  &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans      &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR_ALL  &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans        &bt BT_CLR    &trans        &trans          &bt BT_NXT  &trans  &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans          &trans      &trans
                                                    &trans        &trans          &trans
            >;
        };
    };
};